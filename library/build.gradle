apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'maven-publish'

group 'com.github.felipehjcosta.marvelclient'
version '0.1.0'


android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 21
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

kotlin {
    android()
    iosArm64("ios") {
        binaries {
            framework('library')
        }
    }
    iosX64("iosSim") {
        binaries {
            framework('library')
        }
    }
    js {
        compilations.main {
            configure([compileKotlinJs, compileTestKotlinJs]) {
                kotlinOptions {
                    languageVersion = "1.3"
                    sourceMap = true
                    metaInfo = true
                    moduleKind = "umd"
                }
            }
        }
    }
    sourceSets {
        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental')
            }
        }
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-logging:$ktor_version"
                implementation "com.soywiz:krypto-metadata:$krypto_version"
                implementation "com.soywiz:klock-metadata:$klock_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "io.ktor:ktor-client-mock:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinx_coroutines_version"
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "io.ktor:ktor-client-android:$ktor_version"
                implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"
                implementation "com.soywiz:krypto-android:$krypto_version"
                implementation "com.soywiz:klock-android:$klock_version"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation 'junit:junit:4.12'
                implementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
                implementation "com.soywiz:krypto-android:$krypto_version"
                implementation "com.soywiz:klock-android:$klock_version"
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "io.ktor:ktor-client-js:$ktor_version"
                implementation "io.ktor:ktor-client-logging-js:$ktor_version"
                implementation "com.soywiz:krypto-js:$krypto_version"
                implementation "com.soywiz:klock-js:$klock_version"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
                implementation "io.ktor:ktor-client-mock-js:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$kotlinx_coroutines_version"
            }
        }

        iosMain {
            dependencies {
                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-logging-native:$ktor_version"
                implementation "com.soywiz:krypto-iosarm64:$krypto_version"
                implementation "com.soywiz:klock-iosarm64:$klock_version"
            }
        }

        iosTest {
            dependencies {
                implementation "io.ktor:ktor-client-mock-iosarm64:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinx_coroutines_version"
            }
        }

        iosSimMain {
            dependencies {
                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-logging-iosx64:$ktor_version"
                implementation "com.soywiz:krypto-iosx64:$krypto_version"
                implementation "com.soywiz:klock-iosx64:$klock_version"
            }
        }

        iosSimTest {
            dependencies {
                implementation "io.ktor:ktor-client-mock-iosx64:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinx_coroutines_version"
            }
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

apply from: rootProject.file('gradle/node-js.gradle')
apply from: rootProject.file('gradle/test-mocha-js.gradle')

task iosTest(dependsOn: 'linkTestDebugExecutableIosSim') {
    doLast {
        def binary = kotlin.targets.iosSim.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', "iPhone XÊ€", binary.absolutePath
        }
    }
}
tasks.check.dependsOn iosTest

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("library", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode